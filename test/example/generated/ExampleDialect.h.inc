// DO NOT EDIT! This file is automatically generated by llvm-dialects-tblgen.


#ifdef GET_INCLUDES
#undef GET_INCLUDES
#include "llvm/IR/Instructions.h"
#include "llvm-dialects/Dialect/Dialect.h"
#endif // GET_INCLUDES

#ifdef GET_DIALECT_DECLS
#undef GET_DIALECT_DECLS

namespace llvm_dialects {
class Builder;
} // namespace llvm_dialects

namespace xd {


    class ExampleDialect : public ::llvm_dialects::DialectImpl<ExampleDialect> {
      friend DialectImpl;
      friend ::llvm_dialects::DialectContext;

      void anchor() override;

      static Key& getKey();

    private:
      ExampleDialect(::llvm::LLVMContext& context);

      static ::llvm_dialects::Dialect* make(::llvm::LLVMContext& context);
  
      public:
        ::llvm::AttributeList getAttributeList(size_t index) const {
          return m_attributeLists[index];
        }

      private:
        ::std::array<::llvm::AttributeList, 3> m_attributeLists;
    };

      class Add32Op : public ::llvm::CallInst {
        static const ::llvm::StringLiteral s_name; //{"xd.add32"};

      public:
        static bool classof(const ::llvm::CallInst* i) {
          return ::llvm_dialects::detail::isSimpleOperation(i, s_name);
        }
        static bool classof(const ::llvm::Value* v) {
          return ::llvm::isa<::llvm::CallInst>(v) &&
                 classof(::llvm::cast<::llvm::CallInst>(v));
        }
    static ::llvm::Value* create(::llvm_dialects::Builder& b, ::llvm::Value * lhs, ::llvm::Value * rhs, uint32_t extra);

::llvm::Value * getLhs();
::llvm::Value * getRhs();
uint32_t getExtra();

::llvm::Value * getResult();


      };
    
      class CombineOp : public ::llvm::CallInst {
        static const ::llvm::StringLiteral s_name; //{"xd.combine"};

      public:
        static bool classof(const ::llvm::CallInst* i) {
          return ::llvm_dialects::detail::isOverloadedOperation(i, s_name);
        }
        static bool classof(const ::llvm::Value* v) {
          return ::llvm::isa<::llvm::CallInst>(v) &&
                 classof(::llvm::cast<::llvm::CallInst>(v));
        }
    static ::llvm::Value* create(::llvm_dialects::Builder& b, ::llvm::Type* resultType, ::llvm::Value * lhs, ::llvm::Value * rhs);

::llvm::Value * getLhs();
::llvm::Value * getRhs();

::llvm::Value * getResult();


      };
    
      class ReadOp : public ::llvm::CallInst {
        static const ::llvm::StringLiteral s_name; //{"xd.read"};

      public:
        static bool classof(const ::llvm::CallInst* i) {
          return ::llvm_dialects::detail::isOverloadedOperation(i, s_name);
        }
        static bool classof(const ::llvm::Value* v) {
          return ::llvm::isa<::llvm::CallInst>(v) &&
                 classof(::llvm::cast<::llvm::CallInst>(v));
        }
    static ::llvm::Value* create(::llvm_dialects::Builder& b, ::llvm::Type* dataType);


::llvm::Value * getData();


      };
    
      class WriteOp : public ::llvm::CallInst {
        static const ::llvm::StringLiteral s_name; //{"xd.write"};

      public:
        static bool classof(const ::llvm::CallInst* i) {
          return ::llvm_dialects::detail::isSimpleOperation(i, s_name);
        }
        static bool classof(const ::llvm::Value* v) {
          return ::llvm::isa<::llvm::CallInst>(v) &&
                 classof(::llvm::cast<::llvm::CallInst>(v));
        }
    static ::llvm::Value* create(::llvm_dialects::Builder& b, ::llvm::Value * data);

::llvm::Value * getData();



      };
    } // namespace xd

#endif // GET_DIALECT_DECLS
